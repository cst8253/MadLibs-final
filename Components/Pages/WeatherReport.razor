@page "/weather-report"
@rendermode InteractiveServer

<PageTitle>Weather Report</PageTitle>
<MadLibTitle>Weather Report</MadLibTitle>

<EditForm 
  class="bg-light border border-1 p-5 mb-5" 
  Model="Words" 
  FormName="MissionStatementForm"
  OnValidSubmit="ShowStory">
  <DataAnnotationsValidator />

  <div class="form-group mb-3">
    <label for="PluralNoun1" class="form-label">Plural Noun 1</label>
    <InputText 
      class="form-control" 
      id="PluralNoun1" 
      @bind-Value="Words.PluralNoun1" />
    <ValidationMessage For="() => Words.PluralNoun1" />
  </div>

  <div class="form-group mb-3">
    <label for="PluralNoun2" class="form-label">Plural Noun 2</label>
    <InputText 
      class="form-control" 
      id="PluralNoun2" 
      @bind-Value="Words.PluralNoun2" />
    <ValidationMessage For="() => Words.PluralNoun2" />
  </div>

  <div class="form-group mb-3">
    <label for="Adjective1" class="form-label">Adjective 1</label>
    <InputText 
      class="form-control" 
      id="Adjective1" 
      @bind-Value="Words.Adjective1" />
    <ValidationMessage For="() => Words.Adjective1" />
  </div>

  <div class="form-group mb-3">
    <label for="Adjective2" class="form-label">Adjective 2</label>
    <InputText 
      class="form-control" 
      id="Adjective2" 
      @bind-Value="Words.Adjective2" />
    <ValidationMessage For="() => Words.Adjective2" />
  </div>

  <div class="form-group mb-3">
    <label for="Number1" class="form-label">Number 1</label>
    <InputNumber 
      class="form-control" 
      id="Number1" 
      @bind-Value="Words.Number1" />
    <ValidationMessage For="() => Words.Number1" />
  </div>

  <div class="form-group mb-3">
    <label for="Number2" class="form-label">Number 2</label>
    <InputNumber 
      class="form-control" 
      id="Number2" 
      @bind-Value="Words.Number2" />
    <ValidationMessage For="() => Words.Number2" />
  </div>

  <div class="form-group mb-3">
    <label for="ArticleOfClothing" class="form-label">Article of Clothing</label>
    <InputText 
      class="form-control" 
      id="ArticleOfClothing" 
      @bind-Value="Words.ArticleOfClothing" />
    <ValidationMessage For="() => Words.ArticleOfClothing" />
  </div>

  <button class="btn btn-primary">Read Story</button>
</EditForm>

<Dialog IsOpen="isOpen" CloseCallback="CloseStory">
  <p>Early tomorrow, a <strong>@Words.Adjective1</strong> front will collide with a mass of hot <strong>@Words.PluralNoun1</strong> moving from the north. This means we can expect <strong>@Words.Adjective2</strong> winds and occasional <strong>@Words.PluralNoun2</strong> by late afternoon. Wind velocity will be <strong>@Words.Number1</strong> miles an hour, and the high temperature should be around <strong>@Words.Number2</strong> degrees. So, if you're going out, you had better plan on wearing your <strong>@Words.ArticleOfClothing</strong>.</p>
</Dialog>

@code {
  private class WordsModel {
    [Required(ErrorMessage="Please provide a word.")]
    public string? PluralNoun1 { get; set; }
    [Required(ErrorMessage="Please provide a word.")]
    [NotEqual("PluralNoun1", ErrorMessage="Please provide a different word.")]
    
    public string? PluralNoun2 { get; set; }
    [Required(ErrorMessage="Please provide a word.")]
    public string? Adjective1 { get; set; }
    [Required(ErrorMessage="Please provide a word.")]
    [NotEqual("Adjective1", ErrorMessage="Please provide a different word.")]
    public string? Adjective2 { get; set; }
    [Required(ErrorMessage="Please provide a number.")]
    public double Number1 { get; set; }
    [Required(ErrorMessage="Please provide a number.")]
    [NotEqual("Number1", ErrorMessage="Please provide a different number.")]
    public double Number2 { get; set; }
    [Required(ErrorMessage="Please provide a word.")]
    public string? ArticleOfClothing { get; set; }
  }

  [SupplyParameterFromForm]
  private WordsModel Words { get; set; } = new(); 

  private bool isOpen = false;

  private void ShowStory () 
  {
    isOpen = true;
  }

  private void CloseStory ()
  {
    isOpen = false;
    Words = new();
  }
}
